@model UserIndexViewModel

@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}


<link href="~/lib/font-awesome-4.7.0/font-awesome-4.7.0/css/font-awesome.css" rel="stylesheet" />

<link href="~/lib/HoldOn.js-master/src/css/HoldOn.css" rel="stylesheet" />
<style>
    .ctm-Spinner {
        position: relative;
        width: 125px;
        padding-left: 0;
        padding-right: 0;
    }


    .bootbox.modal .modal-footer {
        justify-content: flex-end;
    }

    .highcharts-credits {
        display: none !important;
    }
</style>
@*<div style="text-align:right;">
        <a asp-area="" asp-controller="home" asp-action="index" class="btn btn-info">@user.identity.name</a>
        <a asp-area="" asp-controller="account" asp-action="logout" class="btn btn-info">logout</a>
    </div>*@

<div class="row">
    <div class="col-md-12">
        <div class="card pb-0">
            <div class="header pb-0">
                <h2>
                    <strong>
                        Parasale
                    </strong>
                    <small>Please Speak "Give me any objection"</small>
                    <small>or "Give me X Objections"</small>
                    <small>or "Give me Objections for X minutes"</small>
                </h2>
                <a href="/Home/GoToLinks" class="btn btn-sm btn-info pull-right"data-toggle="tooltip" data-placement="top" title="Go to Other Links">Links</a>
            </div>
            <div class="body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="collectionId" class="control-label"></label>
                            @if (Model.collections.Count() != 0)
                            {
                                @Html.DropDownListFor(x => x.collectionId, Model.collections, "Select Collection.", new { @class = "form-control collectionHeight" + "" })

                            }
                            else
                            {
                                @Html.DropDownListFor(x => x.collectionId, Model.collections, "No Collections. Please check with your Manager.", new { @class = "form-control collectionHeight" + "" })

                            }
                            <span asp-validation-for="collectionId" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="collectionId" class="control-label">Select Language</label>
                            <div class="d-flex align-items-center flex-nowrap SelectLang">
                                <div class="languageDrop">
                                    <select id="voiceSelect" class="form-control "></select>
                                </div>
                                <div class="voiceBtns">
                                    <div class="d-flex align-items-center flex-nowrap">
                                        <button class="btn btn-primary microphone mr-2 btn-sm" id="microphones" style="border-radius: 4px;" data-toggle="tooltip" data-placement="top" title="Mute/Un-Mute">
                                            <i class=" m-0 fa fa-microphone-slash mcicon"></i>
                                        </button>
                                        <button class="btn btn-success play btn-sm" style="border-radius: 4px;" data-toggle="tooltip" data-placement="top" title="Play/Pause">
                                            <i class="m-0 fa fa-play btnply"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group d-none" id="askedobj">
                            <span id="asked" class="text-blue"></span>
                            <span id="completed" class="text-green"></span>
                            <span id="remainig" class="text-red"></span>

                        </div>

                        <div class="form-group d-none" id="showcounter">
                            <p id="demo"></p>
                            @*<input id="minutes" type="text" style="width: 10px;
                                 border: none; font-size: 16px;
                                font-weight: bold; color: black;"><font size="5">
                                                    :
                                                </font>
                                                <input id="seconds" type="text" style="width: 20px;
                                            border: none; font-size: 16px;
                                            font-weight: bold; color: black;">*@
                        </div>
                        <div class="checkbox ">
                            <input id="randomVoices" class="" type="checkbox">
                            <label for="randomVoices">Random Dialect</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label>&nbsp;</label>
                        <div class="text-box" contenteditable="false"></div>

                    </div>
                </div>
            </div>
            <script src="~/lib/jquery/dist/jquery.js"></script>
            <script src="~/lib/moment.js"></script>
            <script src="~/assets/major.js"></script>
            <script src="~/lib/jQuery-slimScroll-1.3.8/jquery.slimscroll.js"></script>
        </div>
    </div>
</div>
<div class="row">



    <div class="col-sm-12 col-md-12 col-lg-12">
        <div class="card">
            <div class="header pb-0">
                <h2><strong>Reports</strong></h2>
            </div>
            <div class="body">
                <div class="row align-items-center dateAndSwitchRow">
                    <div class="col-md-9">

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group ">
                                    <label class="col-form-label ">Start Date</label>

                                    <input class="form-control dates startDate" id="startDate" placeholder="Start Date" />

                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group ">
                                    <label class="col-form-label ">End Date</label>

                                    <input class="form-control dates startDate" id="endDate" placeholder="End Date" />

                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="col-md-3 text-right">
                        <button class="btn btn-sm btn-primary" id="byCollection" data-toggle="tooltip" data-placement="top" title="Filter Report"><i class="fa fa-filter"></i></button>
                        @*<div class="PS_checkbox switcher">
                                <label for="byCollection">
                                    <input type="radio" name="byreport" id="byCollection" value="">
                                    <span><small></small></span>
                                    <small>By Collection</small>
                                </label>
                            </div>*@

                    </div>
                </div>

            </div>

            <div class="row">
                <div class="col-md-12">
                    <div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
                </div>
            </div>
        </div>
    </div>


    <div class="col-sm-12 col-md-12 col-lg-12">
        <div class="card">
            <div class="header pb-0">
                <h2><strong>Confidence and Consistency</strong> Score Report <i class="fa fa-info-circle " data-trigger="hover" data-toggle="popover" data-placement="top" title="Help ?" data-content="This score indicates how prepared a user is to handle these objections in a live meeting. A lower score suggests the user needs more practice, while a higher score suggests the user is ready to perform with confidence and consistency. The score calculation considers pace of speech, coverage of key phrases, and other factors."></i></h2>
            </div>
            <div class="body">
                <div class="row align-items-center dateAndSwitchRow">
                    <div class="col-md-6">

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group ">
                                    <label class="col-form-label ">Start Date</label>

                                    <input class="form-control dates startDate" id="CCSstartDate" placeholder="Start Date" />

                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group ">
                                    <label class="col-form-label ">End Date</label>

                                    <input class="form-control dates startDate" id="CCSendDate" placeholder="End Date" />

                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="col-md-6 text-right">
                        @*<button class="btn btn-sm btn-info" id="byCollection" data-toggle="tooltip" data-placement="top" title="Filter Report"><i class="fa fa-filter"></i></button>*@
                        <div class="PS_checkbox switcher">
                            <label for="CCSbyObjection">
                                <input type="radio" name="byreport" checked id="CCSbyObjection" value="">
                                <span><small></small></span>
                                <small>By Objection</small>
                            </label>
                        </div>

                        <div class="PS_checkbox switcher">
                            <label for="CCSbyCollection">
                                <input type="radio" name="byreport" id="CCSbyCollection" value="">
                                <span><small></small></span>
                                <small>By Collection</small>
                            </label>
                        </div>

                    </div>
                </div>

            </div>

            <div class="row">
                <div class="col-md-6">
                    <div id="CCScontainer" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
                </div>
                <div class="col-md-6">
                    <div id="CCSbarcontainer" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
                </div>
            </div>
        </div>

    </div>

    <div class="col-md-6 mb-4">
        <div class="card h-100 mb-0">
            <div class="header pb-0">
                <h2><strong>Completed </strong>Objections</h2>
            </div>
            <div class="body tblScroll h-100" id="CompletedObjections">
                @await Component.InvokeAsync("ObjectionLog", new { name = User.Identity.Name, isCompleted = true, isFromAdmin = false })
            </div>
        </div>
    </div>
    <div class="col-md-6 mb-4">
        <div class="card h-100 mb-0">
            <div class="header pb-0">
                <h2><strong>Missed </strong>Objections</h2>
            </div>
            <div class="body tblScroll h-100" id="MissedObjections">
                @await Component.InvokeAsync("ObjectionLog", new { name = User.Identity.Name, isCompleted = false, isFromAdmin = false })
            </div>
        </div>
    </div>

    <div id="" class="col-md-12 ">
        <div class="card">
            <div class="header pb-0">
                <h2><strong>Audit </strong>Logs</h2>
            </div>
            <div class="body tblScroll h-100" id="auditLogs">
                @await Component.InvokeAsync("AuditLogs", new { name = User.Identity.Name })
            </div>
        </div>
    </div>

    @*<div id="pushednotificationdiv" class="col-md-12 ">
            <div class="card">
                <div class="header pb-0">
                    <h2><strong>Pushed </strong>Objections</h2>
                </div>
                <div class="body" id="PushedObjections">
                    @await Component.InvokeAsync("PushedObjection", new { name = User.Identity.Name })
                </div>
            </div>
        </div>*@

</div>

@section Scripts{
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/data.js"></script>
    @*<script src="https://code.highcharts.com/modules/exporting.js"></script>*@
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <script>
        /*==============CHARTS THINGs==========================*/
        var startDate;
        var endDate;
        var startDates;
        var endDates;
        var between = [];
        var type;
        var objectionNotification = [];
        $("#startDate").on("blur", function () {
            between = [];
            startDate = $(this).val();
            endDate = $("#endDate").val();
            endDates = $("#endDate").val();

            startDates = $("#startDate").val();
            DateRange();

        });
        $("#endDate").on("blur", function () {
            between = [];
            endDate = $(this).val();
            endDates = $(this).val();
            startDate = $("#startDate").val();
            startDates = $("#startDate").val();
            DateRange();

        });

        $("#CCSstartDate").on("blur", function () {
            startDates = $(this).val();
            endDates = $("#CCSendDate").val();
        });
        $("#CCSendDate").on("blur", function () {
            endDates = $(this).val();
            startDates = $("#CCSstartDate").val();
        });
        function DateRange() {
            currentDate = new Date(startDate);
            endDate = new Date(endDate);
            while (currentDate <= endDate) {
                var dates = (new Date(currentDate).toISOString('YYYY-MM-DD'));
                var res = dates.split("T");
                between.push(res[0]);
                currentDate.setDate(currentDate.getDate() + 1);
            }
        }
        $(document).on("click", "#checkAll", function () {

            $('input:checkbox').not(this).prop('checked', this.checked);
            objectionNotification = [];
            $('input.generateReport:checkbox:checked').each(function () {
                var sThisVal = $(this).attr('data-userId');
                objectionNotification.push(sThisVal);
            });
        });
        $("#byCollection").on("click", function () {
            init();
        });

        $("#CCSbyCollection").on("click", function () {

            type = "byCollection";
            initCCS();

        });
        $("#CCSbyObjection").on("click", function () {
            type = "byObjection";
            initCCS();
        });
        //$("#byCollection").on("click", function () {
        //    if ($(this).prop("checked")) {

        //        $.ajax({
        //            url: '/Home/ForReportData',
        //            success: function (res) {

        //                $("#CreateNewModal-label").html("Select Collection(s)");
        //                $("#CreateNewBody").html(res);
        //                // $.validator.unobtrusive.parse("#CreateNewModal");
        //                $("#CreateNewModal").modal();
        //            },
        //        });
        //    }
        //    else {

        //        destroyTable();
        //    }
        //});

        function destroyTable() {
            window.location.reload(true);
        }


        function chartsInitial(data, between) {

            $('#container').highcharts({
                title: {
                    text: 'Completed Objection(s)',
                    x: -20 //center
                },

                xAxis: {

                    categories: between
                },
                yAxis: {
                    title: {
                        text: 'Number of Objection(s)'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    valueSuffix: ' Objection(s)'
                },
                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'middle',
                    borderWidth: 0
                },
                series: data
            });
        };
          function CCSchartsInitial(data, between) {

            $('#CCScontainer').highcharts({
                title: {
                    text: 'Confidence and Consistency Score (Line Chart)',
                    x: -20 //center
                },

                xAxis: {

                    categories: between
                },
                yAxis: {
                    title: {
                        text: 'Average Score'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    valueSuffix: ' Average Score'
                },
                //legend: {
                //    layout: 'vertical',
                //    align: 'right',
                //    verticalAlign: 'middle',
                //    borderWidth: 0
                //},
                series: data
            });
        };
        function CCSbarChartsInit(data, between) {
            Highcharts.chart('CCSbarcontainer', {
                chart: {
                    type: 'column'
                },
                title: {
                    text: 'Confidence and Consistency Score (Bar Chart)'
                },
                subtitle: {
                    text: ''
                },
                xAxis: {
                    categories: between,
                    crosshair: true
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: 'Average Score'
                    }
                },
                //tooltip: {
                //    headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                //    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                //        '<td style="padding:0"><b>{point.y:.1f} mm</b></td></tr>',
                //    footerFormat: '</table>',
                //    shared: true,
                //    useHTML: true
                //},

                plotOptions: {
                    column: {
                        pointPadding: 0.2,
                        borderWidth: 0
                    }
                },
                series: data
            });
        }

        $(document).on('change', '.generateReport', function () {
            var control = $(this);
            var isTeamMember = control.is(':checked');
            var userId = control.attr('data-userId');
            if (isTeamMember) {
                objectionNotification.push(
                    userId
                );
            }
            else {
                $.each(objectionNotification, function (i) {
                    if (objectionNotification[i].userId === userId) {
                        objectionNotification.splice(i, 1);
                        return false;
                    }
                });
            }
        });


        $(document).on("click", "#btnCollectionGenerateReport", function () {

            var formData = new FormData();
            formData.append("models", objectionNotification);
            formData.append("type", "byCollection");
            formData.append("startDate", startDates);
            formData.append("endDate", endDates);
            $("#CreateNewModal").modal('hide');
            $.ajax({

                type: 'POST',
                processData: false,
                contentType: false,
                url: '/Home/GetSelectedData',
                //data: { models: objectionNotification, type: "byUser", startDate: startDates, endDate: endDates },
                data: formData,
                success: function (response) {

                    chartsInitial(response.completed, response.completedDates);
                },
            });
        });

        /*=====================================================*/
        function initCCS() {

            $.ajax({
                url: "/Home/getCCSReportData",
                data: { type: type, startDate: startDates, endDate: endDates },
                success: function (response) {

                    CCSchartsInitial(response.completed, response.completedDates);
                    CCSbarChartsInit(response.completed, response.completedDates);
                }

            });
        }
        function init() {
            $.ajax({
                url: "/Home/getReportData",
                data: { startDate: startDates, endDate: endDates },
                success: function (response) {

                    chartsInitial(response.completed, response.completedDates);
                }

            });
        }

        $(document).ready(function () {


            var today = new Date();
            $("#startDate").datetimepicker({
                format: "YYYY-MM-DD"
            });
            $("#endDate").datetimepicker({
                format: "YYYY-MM-DD",
                maxDate: today
            });
            $("#CCSstartDate").datetimepicker({
                format: "YYYY-MM-DD"
            });
            $("#CCSendDate").datetimepicker({
                format: "YYYY-MM-DD",
                maxDate: today
            });



            var end = '@(DateTime.Now.ToShortDateString())';
            end = new Date();
            var days = end.getDate();
            var curr_month = end.getMonth() + 1;
            var curr_year = end.getFullYear();
            var ends = curr_year + "-" + curr_month + "-" +days;
            $("#endDate").val(ends);
            var st = '@(DateTime.Now.AddDays(-5).ToShortDateString())';
            var sst = new Date(st);

              var sdays = sst.getDate();
            var scurr_month = sst.getMonth() + 1;
            var scurr_year = sst.getFullYear();
            var starts = scurr_year + "-" + scurr_month + "-" + sdays;
        $("#startDate").val(starts);
        $("#CCSstartDate").val(starts);
            startDates = $("#startDate").val();
            endDates = $("#endDate").val();
            startDate = $("#startDate").val();
            endDate = $("#endDate").val();
            $("#CCSendDate").val(endDates);

            init();
            type = "byObjection";
            initCCS();

        });

        $(".scrollable").slimScroll({
            height: '285px'
        });

        $(function () {
            $('.momentTime').each(function () {
                var d = moment($(this).html(), "YYYYMMDDHHmmss").fromNow();
                $(this).html(d);
            });
            var model = $("#checkModel").attr('data-checkmodel');
            if (model === "0") {
                $("#pushednotificationdiv").hide();
            }
        });
    </script>


}
